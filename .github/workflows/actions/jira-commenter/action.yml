name: Post Jira Comment
description: "Post comment to Jira issues containing test results and report urls"

inputs:
  project-name:
    description: "The name of the project for which the reports are being posted"
    required: true
  reports:
    description: An array of json objects reports urls objects
    required: true
  ticket:
    description: "Consists of the ticket abbreviation and key. e.g. ITU-269"
    required: true
  jira-user-email:
    description: "The email of the Jira user for publishing the deployment URL"
    required: true
  jira-user-api-token:
    description: "The api token from the Jira user used for authentication to Jira"
    required: true

runs:
  using: composite
  steps:
    - name: Build Jira API Request Body
      id: build-jira-api-request-body
      if: always()
      shell: bash
      run: |
        # 1. Build the multi-line comment string first
        commentBody="${{ inputs.project-name }} API-Test-Report:"
        
        # Use a subshell and process substitution for a cleaner loop
        while IFS= read -r entry; do
          name=$(echo "$entry" | jq -r '.name')
          url=$(echo "$entry" | jq -r '.reportUrl')
          succeeded=$(echo "$entry" | jq -r '.succeeded')
        
          # Append with a literal \n for the newline
          commentBody+="\n$name:$succeeded - $url"
        done < <(echo '${{ inputs.reports }}' | jq -c '.[]')
        
        # 2. Use jq to create the complete, escaped, single-line JSON payload
        # -n: Create new JSON, don't read from stdin
        # -c: Compact output (ensures it's a single line)
        # --arg: Safely pass the shell variable into the jq script
        jiraPayload=$(jq -n -c \
          --arg bodyContent "$commentBody" \
          '{
            body: $bodyContent,
            visibility: {
              type: "role",
              value: "Members"
            }
          }')
        
        # 3. Output the final JSON payload. It's now a single line, so this is safe.
        echo "jiraPayload=$jiraPayload" >> $GITHUB_OUTPUT

    - name: Publish Jira Comment
      shell: bash
      if: always()
      run: |
        # The output is already a complete and valid JSON string.
        # Just pass it directly to the --data field.
        curl --request POST \
             --url 'https://austrianstandards.atlassian.net/rest/api/2/issue/ITU-269/comment' \
             --user '${{ inputs.jira-user-email }}:${{ inputs.jira-user-api-token }}' \
             --header 'Accept: application/json' \
             --header 'Content-Type: application/json' \
             --data '${{ steps.build-jira-api-request-body.outputs.jiraPayload }}'
