name: Run Postman Collection
inputs:
  collection:
    description: Postman collection
    required: true
  environment:
    description: Postman collection environment
    required: false
    default: ""
  datasource:
    description: Postman Data Source for running collections (optional)
    required: false
    default: ""
  folder:
    description: Postman collection folder to run (optional)
    required: false
    default: ""
  report-filename:
    description: Filename of the report
    required: true
    default: report
  report-directory:
    description: Directory to store the report (optional)
    required: false
    default: reports
  api-key:
    description: Postman API Key (optional)
    required: false
    default: ""
  cf-client:
    description: Cloudflare client ID (optional)
    required: false
    default: ""
  cf-secret:
    description: Cloudflare client password (optional)
    required: false
    default: ""

outputs:
  report:
    description: |
      "A object containing, the collection name, the url to the report, and if the collection was successful. 
      { name: string, report_url: string, success: boolean }"
    value: ${{ steps.build_report_output.outputs.report }}

runs:
  using: "composite"
  steps:
    - name: Install Newman
      run: npm install -g newman newman-reporter-htmlextra
      shell: bash

    - name: Create Directory for Postman results
      run: mkdir -p ${{inputs.report-directory}}
      shell: bash

    - name: Run collections
      id: run_collections
      run: |
        # Initial Command to run Newman with the provided inputs
        declare -a NEWMAN_ARGS
        
        NEWMAN_ARGS=(
          "run" "${{inputs.collection}}"
          "-e" "${{inputs.environment}}"
          "-r" "cli,htmlextra"
          "--reporter-htmlextra-export" "${{inputs.report-directory}}/${{inputs.report-filename}}.html"
          "--reporter-htmlextra-omitHeaders"
          "--reporter-htmlextra-omitResponseBodies"
        )
        
        # Apply Postman Datasource
        if [ "${{inputs.datasource}}" != "" ]; then
        NEWMAN_ARGS+=("--iteration-data" "${{inputs.datasource}}")
        fi
        
        # Apply Postman Folder
        if [ "${{inputs.folder}}" != "" ]; then
        NEWMAN_ARGS+=("--folder" "${{inputs.folder}}")
        fi
        
        # Apply API key
        if [ "${{inputs.api-key}}" != "" ]; then
        NEWMAN_ARGS+=("--env-var" "api-key=${{inputs.api-key}}")
        fi
        
        # Apply Cloudflare Credentials
        if [ "${{inputs.cf-client}}" != "" ] && [ "${{inputs.cf-secret}}" != "" ]; then
        NEWMAN_ARGS+=(
          "--env-var" "cf-client=${{inputs.cf-client}}" 
          "--env-var" "cf-secret=${{inputs.cf-secret}}"
        )
        fi
        
        # Execute the Newman command
        echo "Execute Command: newman ${NEWMAN_ARGS[*]}"
        newman "${NEWMAN_ARGS[@]}"
      shell: bash

    - name: Upload Report
      id: upload_report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ${{inputs.report-filename}}
        path: ${{inputs.report-directory}}/${{inputs.report-filename}}.html
        retention-days: 7

    - name: Build Report Output
      id: build_report_output
      if: always()
      shell: bash
      run: |
        echo "${{ steps.upload_report.outputs.artifact-url }}"
        report=$(jq -cn --arg succeeded "${{ steps.run_collections.outcome }}" '{name: "Data-Driven API Tests", url: "https://example.com/report", succeeded: ($succeeded == "true")}')
        
        echo "Generated Report JSON: $report"
        echo "report=$report" >> $GITHUB_OUTPUT
